#!/usr/bin/expect

set timeout -1

set env(TERM) xterm-256color
set env(SHELL) /bin/bash
set env(SHLVL) 2
set env(SUDO_COMMAND) /bin/bash
set HOST "172.16.0.4"
set VM_NBR 8
set FPGA "192.168.3.100"
set kvm_or_laputa [lindex $argv 0]
set TIMES 10

if {$kvm_or_laputa == "laputa"} {
    set HOST_NET "host_net_ulh.sh"
} else {
    set HOST_NET "host_net.sh"
}

spawn bash -c "ssh $FPGA"

expect {
	"centos@ip" {
		send "screen -r fsim0\n"
	}
}


expect {
    "buildroot login" {
	puts "start login"
    	send "root\n"
	exp_continue
    }

    "Password:" {
	send "firesim\n"
	expect {
		"#" {
            send "cd / &&  mount ubuntu-vdisk.img root && chroot root bash\n"
                expect  "root@buildroot:"

                send "./mount_dev.sh && ./prepare_kill.sh && ./${HOST_NET} \n" 
                expect  "#"

                send "script /dev/null \n"
                expect "#"

# prepare
                set x 0
                while {$x < ${VM_NBR}} {
                    puts "x is $x"

                        send "screen -e^ee -S laputa${x} \n"
                        expect "#"

                        send "./${kvm_or_laputa}_linux.sh ${x}\n"
                        expect "Please press Enter to activate this console"

                        send "\n"	
                        expect "#"

                        send "mount /dev/vda root && chroot root bash \n"
                        expect "#"

                        send "\n"
                        expect "#"

#			    send "./mount_dev.sh \n"
#			    expect "#"

                        send "\x05"; send "d"
                        expect "buildroot"

                        set x [expr {$x + 1}]
                }

# execute
            set x 0
                while {$x < ${VM_NBR}} {
                    send "screen -r laputa${x} \n"
                        expect "#"
                        send "./sysbench_cpu_run.sh && echo i  g\n"

                        send "\x05"; send "d"
                        expect "buildroot"
                        set x [expr {$x + 1}]
                }

            puts "Wait for Showing\n"

# show
                set x 0
                while {$x < ${VM_NBR}} {
                    send "screen -r laputa${x} \n"
                        expect "i g"
                        send "\x05"; send "d"
                        expect "buildroot"
                        set x [expr {$x + 1}]
                }


            send "echo 'ALL TEST PASS'\n"
                expect "HANGING"

                send "\x01"; send "d"
        }
    }
    }
}



expect {
    "centos@ip" {
        send "screen -r fsim1\n"
    }
}

expect {
    "buildroot login" {
    	send "root\n"
	exp_continue
    }

    "Password:" {
	send "firesim\n"
	expect {
		"#" {
   		 	send "cd / &&  mount ubuntu-vdisk.img root && chroot root \n"
   		 	expect "root@buildroot:"

   		 	send "mount blk-dev.img root && chroot root \n"
   		 	expect "root@buildroot:"


                        send "./mount_dev.sh && script /dev/null \n"
                        expect "\n"


                        send "screen -e^ee -S laputa0 \n"
                        expect "#"

	                send "HOST=http://$HOST/ TIMES=$TIMES ./apache_client.sh && echo 'bye apache' | tr a-z A-Z\n"

			send "\x05"; send "d"
                        expect "#"

                        sleep 3

                        send "screen -e^ee -S laputa1 \n"
                        expect "#"
		
	                send "HOST=http://$HOST1/ TIMES=$TIMES ./apache_client.sh && echo 'bye apache' | tr a-z A-Z\n"
		 	expect "BYE APACHE"

			send "\x05"; send "d"
                        sleep 3

                        send "screen -r laputa0\n"
                        expect "BYE APACHE"

                        send "echo 'ALL TEST DONE'\n"
                        expect "HANGING"
		}
	}
    }
}

expect {
	"centos@ip" {
		send "screen -r fsim0\n"
	}
}

expect {
	"#" {
		send "./apache_kill.sh && echo a  b\n"
		expect "a b"
		send "./memcached_server.sh && echo a  c\n"
		expect "a c" 
		send "echo 'Hello Memcached' | tr a-z A-Z\n"
		expect {
			"HELLO MEMCACHED" {
				send "\x01"; send "d"
			}
		}
    }	

}


expect {
	"centos@ip" {
		send "screen -r fsim1\n"
	}
}
expect {
    "root@buildroot:" {
        send "HOST=$HOST TIMES=$TIMES ./memcached_client.sh && echo 'bye memcached' | tr a-z A-Z\n"
        expect "BYE MEMCACHED"
	send "\x01"; send "d"
    }	
}


expect {
	"centos@ip" {
		send "screen -r fsim0\n"
	}
}

expect {
    "#" {
    	send "./memcached_kill.sh && echo a  d\n" 
	    expect "a d"
send "TIMES=$TIMES ./lmbench.sh && echo a  f\n"
        expect "a f"
        send "TIMES=$TIMES ./hackbench.sh && echo a  g\n"
        expect "a g"
        send "TIMES=$TIMES ./untar_large.sh && echo a  h\n"
        expect "a h"
        send "TIMES=$TIMES ./sysbench_io_run.sh && echo a  i\n"
        expect {
            "a i" {

            }
            "display a backtrace" {

            }
        }
		send "\x01"; send "d"
    }

}

expect {
	"centos@ip" {
		send "screen -r fsim1\n"
	}
}
expect {
    "root@buildroot:" {
    	send "exit\n"
    	expect "root@buildroot:"
    
    	send "exit\n"
    	expect "#"
    
    	send "poweroff -f\n"
    }	
}
#expect {
#	"centos@ip" {
#		send "screen -r fsim0\n"
#	}
#}
#
#expect {
#    "#" {
#	send "./memcached_kill.sh && echo a  d\n" 
#	expect "a d"
#	send "mkdir -p /var/run/mysqld && echo a  e\n"
#	expect "a e" 
#	send "chown mysql:mysql /var/run/mysqld && echo a  f\n"
#	expect "a f"
#	send "./mysql_server.sh && echo a  g \n"
#	expect "a g"
#	send "echo 'hello mysql' | tr a-z A-Z \n"
#	expect {
#		"HELLO MYSQL" {
#			send "\x01"; send "d"
#		}
#	}
#    }	
#}
#
#expect {
#	"centos@ip" {
#		send "screen -r fsim1\n"
#	}
#}
#
#
#expect {
#    "root@buildroot:" {
#	send "HOST=$HOST ./sysbench_client.sh && echo 'bye mysql | tr a-z A-Z'\n"
#	expect "BYE MYSQL" 
#	
#	send "exit\n"
#	expect "root@buildroot:"
#
#	send "exit\n"
#	expect "#"
#
#	send "poweroff -f\n"
#    }	
#}
#interact
puts "Test OK"
